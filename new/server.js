 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var moment = require('moment')
var mongodb = require('mongodb').MongoClient
var urldb = 'mongodb://glitchme:987654321@ds163612.mlab.com:63612/glitch'; 
var shortid = require('shortid')

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.get('/:id', function(req, res){
  mongodb.connect(urldb, function (err, db) {  
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
      res.send(err)
    } else {
      console.log('Connection established to', urldb);
      var id = req.params.id
      db.collection('shorturl').find({
        shortid: {
          $eq: id
        }
      }).toArray(function(err, data){
        if(data.length == 1) {
          data = data[0]
          if(/^((http|https):\/\/)/.test(data.url))
            res.redirect(data.url)
          else
            res.redirect("https://"+data.url)
        } else {
          res.json({
            "error": "URL not found"
          })
        }
      })
      db.close();
    }
  })
})

app.get('/new/:data*', function(req, res) {
  var fullUrl = req.protocol + '://' + req.get('host') + req.originalUrl;
  fullUrl = fullUrl.substring(fullUrl.indexOf('new')+4, fullUrl.length)
  mongodb.connect(urldb, function (err, db) {  
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
      res.send(err)
    } else {
      console.log('Connection established to', urldb);
      var url_data = fullUrl
      if(/^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/.test(url_data)){  
        var id = shortid.generate()
        var url_doc = {
            shortid: id,
            url: url_data,
        }
        db.collection('shorturl').insert(url_doc, function(err, data){
          if(err) throw err
          console.log(JSON.stringify(data))  
          res.json({
            original_url: url_doc.url,
            short_url: "https://fcc-api-3.glitch.me/" + url_doc.shortid
          })          
        })
      } else {
        res.json({
          error: "Invalid URL"
        })  
      }
      db.close();
    }
  })
})

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

